# Parkinson's Disease Prediction Project

This project aims to predict the presence of Parkinson's disease in individuals based on a set of biomedical voice measurements. The primary goal is to develop a machine learning model that can accurately classify whether a person has Parkinson's disease based on their voice characteristics.

## Overview

The project involves data loading, preprocessing, model training, and evaluation. The dataset includes features such as frequency measurements (MDVP:Fo(Hz), MDVP:Fhi(Hz), MDVP:Flo(Hz)), jitter measurements (MDVP:Jitter(%), MDVP:Jitter(Abs), MDVP:RAP, MDVP:PPQ, Jitter:DDP), shimmer measurements (MDVP:Shimmer, MDVP:Shimmer(dB), Shimmer:APQ3, Shimmer:APQ5, MDVP:APQ, Shimmer:DDA), NHR, HNR, RPDE, DFA, spread1, spread2, D2, and PPE.

## Libraries Used

-   NumPy: Used for numerical operations and array manipulation.
-   Pandas: Used for data manipulation and analysis, particularly for loading and working with tabular data.
-   Scikit-learn: Used for machine learning tasks such as data splitting, model training, and evaluation.
-   StandardScaler: Used for scaling features.
-   SVM: Used for implementing the Support Vector Machine model.

## Algorithms Implemented

-   Support Vector Machine (SVM): A powerful and versatile Machine Learning model

## Data Source

-   Parkinson's Disease Dataset: The dataset is loaded from a CSV file named `parkinsons.csv`.

## Data Loading

-   The dataset is loaded using `pandas.read_csv()` from a local file.

## Data Preprocessing

- The 'name' column is dropped as it is not needed for the model
- The data is then split into features and target
- Data Scaling: StandardScaler is used to scale the features to have zero mean and unit variance.

## Model Training

-   The dataset is split into training and testing sets using `train_test_split()` from Scikit-learn.
-   A SVM is initialized and trained on the training data.

## Evaluation

-   The trained model is used to make predictions on the test set.
-   The accuracy of the model is evaluated using `accuracy_score()` from Scikit-learn.
